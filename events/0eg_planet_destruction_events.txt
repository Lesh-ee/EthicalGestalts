namespace = planet_destruction

#planet_event = {
#	id = planet_destruction.1
#	is_triggered_only = yes
#	hide_window = yes
#
#	immediate = {
#		remove_planet = yes
#	}
#}

# Add static war exhaustion for these planet destruction events with:
# add_static_war_exhaustion = {
#				attacker = <country>						# attacker in this battle
#				location = <planet>							# location for battle
#				value_for_planet_destruction = <0.0-1.0>	# scale amount of WE added to this battle
#			}

# God Ray
planet_event = {
	id = planet_destruction.400
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			from.owner = {
				country_event = { id = planet_destruction.401 }
			}
		}

		# Contingency Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_godrayed
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_godray days = 3600 }
			}
		}

		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					is_empire = yes # undercoat: moved to scripted trigger
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by conversion
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_materialist
						AND = {
							is_playable = yes # undercoat: moved to scripted trigger
							OR = {
								is_materialist = yes
								is_egalitarian = yes
								is_machine_empire = yes # undercoat: moved to scripted trigger
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_converted_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_converted_my_world
					who = from.owner
				}
				if = {
					limit = { is_gestalt = no } # undercoat: moved to scripted trigger
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
			# Add war exhaustion to planet owner
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.fleet.owner
					}
					add_static_war_exhaustion = {
						attacker = from.fleet.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}
		every_owned_pop = {
			limit = {
				OR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_living_standard = { # Bio-trophies die without care
						country = root.owner
						type = living_standard_organic_trophy
					}
				}
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		if = {
			limit = {
				NOR = {
					AND = {
						exists = owner
						owner = { is_hive_empire = yes }
					}
					AND = {
						exists = branch_office_owner
						branch_office_owner = {
							is_hive_empire = yes
							is_spiritualist = yes
						}
					}
				}
			}
			every_owned_pop = {
				limit = {
					has_trait = trait_hive_mind
				}
				kill_pop = yes
				from.owner = {
					if = {
						limit = { has_ascension_perk = ap_become_the_crisis }
						complete_crisis_objective = crisobj_purge_pops
					}
				}
			}				
		}
		else_if = {	# shift a single-planet hive mind
			limit = {
				exists = owner
				owner = {
					is_hive_empire = yes
					NOT = { has_ethic = ethic_fanatic_spiritualist }
					num_owned_planets = 1
				}
			}
			owner = {
				shift_ethic = ethic_spiritualist
				shift_ethic = ethic_spiritualist
				add_opinion_modifier = { modifier = opinion_converted_us who = from.owner }
			}
		}
		else_if = {	# tear off a piece of a hive mind
			limit = {
				exists = owner
				owner = {
					is_hive_empire = yes
					NOT = { has_ethic = ethic_fanatic_spiritualist }
				}
			}
			owner = { save_event_target_as = source_hive }
			create_country = {
				name = random
				type = default
				species = event_target:source_hive.species
				authority = auth_hive_mind
				civics = random
				ethos = { ethic = ethic_fanatic_spiritualist }
				effect = {
					if = {
						limit = {
							event_target:source_hive = { has_origin = origin_tree_of_life }
						}
						set_origin = origin_tree_of_life
					}
					else_if = {
						limit = {
							event_target:source_hive = { has_origin = origin_necrophage }
						}
						set_origin = origin_necrophage
					}
					else_if = {
						limit = {
							event_target:source_hive = { has_origin = origin_lithoid }
						}
						set_origin = origin_lithoid
					}
					else_if = {
						limit = {
							event_target:source_hive = { has_origin = origin_progenitor_hive }
						}
						set_origin = origin_progenitor_hive
					}
					if = {
						limit = {
							event_target:source_hive = { has_civic = civic_hive_assimilator }
						}
						change_government = {
							authority = auth_hive_mind
							civics = { civic = civic_hive_assimilator civic = random }
						}
					}
					create_gestalt_councilors = yes
				}
			}
			owner = { add_opinion_modifier = { modifier = opinion_our_mutilation who = last_created_country } }
			set_owner = last_created_country
			solar_system.starbase = { set_owner = last_created_country }
			last_created_country = {
				copy_ethos_and_authority = root.owner
				shift_ethic = ethic_spiritualist
				shift_ethic = ethic_spiritualist
				add_opinion_modifier = { modifier = opinion_converted_us who = from.owner }
				add_opinion_modifier = { modifier = opinion_our_parent who = root.owner }
			}
			every_owned_pop = {
				limit = { has_trait = trait_hive_mind }
				random_list = {
					30 = { kill_pop = yes }
					60 = { }
				}
			}
		}
		every_owned_pop = {
			limit = {
				NOR = {
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_hive_mind
				}
			}
			pop_change_ethic = ethic_spiritualist
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_habitat = yes # undercoat: moved to scripted trigger
			}
			spawn_habitat_divine_effect = yes
		}
		else_if = {
			limit = {
				is_unshattered_ring_habitable_segment = yes # undercoat: moved to scripted trigger
			}
			spawn_ringworld_divine_effect = yes
		}
		if = {
			limit = {
				OR = {
					is_habitat = yes # undercoat: moved to scripted trigger
					is_unshattered_ring_habitable_segment = yes # undercoat: moved to scripted trigger
				}
			}
			# nothing
		}
		else = {
			change_pc = this
		}
		add_modifier = {
			modifier = god_rayed
			days = 3600
		}
		# self-raying
		if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			add_modifier = {
				modifier = uneasy_faith
				days = 3600
			}
		}
	}
}

# Deluge
planet_event = {
	id = planet_destruction.700
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
			}
			from.owner = { country_event = { id = planet_destruction.701 } }
		}

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			#set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_drenched
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			#set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_drenched
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
			destroy_colony = yes
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
				}
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_deluge days = 3600 }
			}
		}
		if = { #you've basically shortcutted terraforming. Yep, that's a breach
			limit = {
				exists = space_owner
				space_owner = {
					is_same_value = from.owner
				}
				OR = {
					NOT = { exists = owner }
					owner = { is_same_value = from.owner }
				}
				OR = {
					is_active_resolution = "resolution_ecology_environmental_control_board"
					is_active_resolution = "resolution_ecology_paradise_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					is_empire = yes
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_drenched_my_world
					who = from.owner
				}
				if = {
					limit = { is_gestalt = no }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_playable = yes
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_playable = yes
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		if = {
			limit = {
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.owner
					}
					add_static_war_exhaustion = {
						attacker = from.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}

		every_owned_pop = {
			limit = {
				NOT = { has_trait = trait_aquatic }
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		every_deposit = {
			limit = { has_deposit_category = deposit_cat_singlemind_enclave }
			remove_deposit = yes
		}
		if = {
			limit = { #were there any Aquatic pops? If so, the ownership needs to be flipped
				any_owned_pop = {
					is_scope_valid = yes
					exists = this
				}
				owner = {
					NOT = { is_same_value = from.owner }
				}
			}
			set_owner = from.owner
		}
		if = {
			limit = {
				NOT = { is_broken_world = yes }
			}
			change_pc = pc_ocean
		}

		# from = { #feedback suggests this isn't fun, but leaving it here in case we need it
		# 	ice_mining_depletion_effect = yes

		# 	if = {
		# 		limit = {
		# 			root = { has_planet_flag = temp_ice_mine_exhausted_flag }
		# 		}
		# 		event_target:mined_system.starbase = {
		# 			remove_starbase_building = {
		# 				building = ice_mining_station
		# 			}
		# 		}
		# 		create_message = {
		# 			type = DELUGE_EXHAUSTED_ICE
		# 			localization = DELUGE_EXHAUSTED_ICE_DESC
		# 			days = 20
		# 			target = root
		# 			variable = {
		# 				type = name
		# 				localization = SYSTEM
		# 				scope = event_target:mined_system
		# 			}
		# 		}
		# 	}
		# }
	}
}
